# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
resources:
  repositories:
  - repository: self
    type: git
    ref: main

pool:
  name: Self-hosted Tosca

stages:
- stage: build
  jobs:
    - job: build_app
      displayName: Build Tricentis Insurance Quoting Application
#      steps:
#        - script: echo build application...

- stage: deploy
  jobs:
    - job: pre_deploy_app
      displayName: Pre deploying application to Docker container
#      steps:
#        - script: echo set environment...
    - job: deploy_app
      displayName: Deploy application to Docker container
#      steps:
#        - script: echo depoly to container...

- stage: test
  jobs:
    - job: run_tests
      displayName: Run Tosca test(s)
      steps:
#Run Tosca test(s) via AOS API
      - task: PowerShell@2
        displayName: Exeute Tosca tests
        inputs:
          targetType: 'filePath'
          filePath: $(System.DefaultWorkingDirectory)\tosca_execution_client.ps1
          arguments: >
            -toscaServerUrl "$(toscaServerUrl)"
            -eventsConfigFilePath "$(eventsConfigFilePath)"
            -projectName "$(projectName)"
            -creator "$(creator)"
            -resultsFolderPath "$(Pipeline.Workspace)/TestResults"
            -executionEnvironment "Dex"
            -pollingInterval 20
            -debug "True"
#Publish Pipeline Artifact
      - task: PublishPipelineArtifact@1
        displayName: Publish Pipeline Artifact
        inputs:
          targetPath: '$(Pipeline.Workspace)'
          artifact: 'pipelineArtifacts'
          publishLocation: 'pipeline'

 # Convert results file to UFT8
      - task: PowerShell@2
        displayName: Convert results to UFT8
        inputs:
          targetType: 'inline'
          script: |
            # in case there are multiple result files, sort and take the last one (most recently created)
            $resultsFileName = (Get-ChildItem -Path "$(Pipeline.Workspace)\TestResults" -Filter '*_results.xml' | sort LastWriteTime | Select-Object -Last 1).name
            $resFilePath = "$(Pipeline.Workspace)\TestResults\$resultsFileName"
            $Content = Get-Content $resFilePath -Raw
            $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False
            [System.IO.File]::WriteAllLines($resFilePath, $Content, $Utf8NoBomEncoding)
#Publish Test Results
      - task: PublishTestResults@2
        displayName: Publish results
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '$(Pipeline.Workspace)\TestResults\*_results.xml'
          #testResultsFiles: '**/*_results.xml'

#      - task: DownloadBuildArtifacts@1
#        inputs:
#          buildType: 'current'
#          downloadType: 'specific'
#          itemPattern: '**/*_results.xml'
#          downloadPath: '$(System.ArtifactsDirectory)'
- stage: staging
  jobs:
    - job: deploy_app_to_staging
      displayName: Deploy application to staging
      steps:
        - script: echo Deploying to staging environment...
